创建文件夹
git mkdir 名称

初始化当前文件夹为git仓库
git init
	
添加一个文件到提交的队列，可添加多个，之后用commit一次提交
git add 文件

提交到git仓库，提交之前通过git add一个一个的添加的资源
git commit -m "提交说明"


查看当前git仓库状态
git status

查看文件的修改
git diff 文件名称

查看提交的记录
git log 
查看提交的记录 简略信息
git log --pretty=oneline


版本回退
git reset --hard git版本号
注意: 
	1.版本号没必要写全，前几位就可以了(至少4位)，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了
	2.版本号也可用 HEAD* 代替，HEAD表示当前版本，HEAD^表示当前版本的上个版本，HEAD^^表示当前版本的上上个版本，HEAD~100表示上100个版本
	3.如果当前是版本2，回退到版本1之后，git log就看不到版本2的提交信息了，但可通过git reflog找回
	4.这将会撤销暂存区的更改

查看提交历史，方便找到版本号
git reflog
	
	
	
	
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
撤销工作区的更改，回退到最近一次git commit或git add的状态，删除的文件也可找回
git checkout
只是撤销文件readme.txt的更改(必须加 -- )
git checkout -- readme.txt
	
	
撤销当前暂存区的更改，版本不变，加文件名称则只会撤销单个文件，不加撤销所有
git reset HEAD 文件名称
	
		
	
	
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

关联本地仓库与远程仓库	
git remote add origin git远程仓库的路径
注意:
	此命令须在本地仓库目录下执行
	origin为仓库名称，默认origin即可
	git远程仓库的路径 可以是多种协议,以下2中均可，cyuxigithub是账户名，testClone是仓库名称
		https://github.com/cyuxigithub/testClone.git
		git@github.com:cyuxigithub/testClone.git
	远程仓库，需要在github中先创建一个仓库，创建时不要勾选Initialize this repository with a README

查看当前远程仓库信息
git remote	-v
	
从远程仓库克隆到本地当前文件夹下，作为本地仓库（仅master分支）
git clone git远程仓库的路径	本地目录名称(不填以远程目录名为准)

将远程库的分支克隆岛本地
git checkout -b 分支名称 远程库名称/远程库分支名称	
git branch 分支名称 远程库名称/远程库分支名称	
	
推送，将本地仓库同步到远程库
git push 远程库名称 本地分支名称	
注意：
	推送前本地库必须与远程库相关联(git remote)
	本地分支名称须与远程分支关联，否则将会提示“no tracking information”，master默认关联

关联本地分支与远程分支
git branch --set-upstream 本地分支名称 远程库名称/远程库分支名称

拉去远程库的更新,并合并到本地库
git pull
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

创建一个分支
git branch  分支名称
切换到分支
git checkout 分支名称	
	
创建并且切换到分支
git checkout -b 分支名称

	
	
查看分支，这将会列出所有分支名称，带*号的为当前分支
git branch

删除分支，如果分支为被合并将会删除失败
git branch -d 分支名称
删除分支，强制删除，可删除未合并的分支
git branch -D 分支名称

合并指定的分支到当前分支，合并速度快，但会丢失分支中的提交历史
git merge 分支名称

禁用快进模式合并指定分支，合并速度慢，但会以新的commit合并，会保留分支中的提交历史
git merge --no-ff -m "提交说明" 分支名称



查看分支合并的情况，左侧是事件线
git log --graph --pretty=oneline --abbrev-commit



	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

保留现场，将当前的工作区存储为一个"快照"，随时可以恢复，比如去修改另外一分支的紧急bug之后，回来恢复快照继续编码
git stash

查看所有的工作区"快照"
git stash list

删除某一快照，不加快照ID则删除第一个快照
git stash drop 快照ID

恢复到某一快照，但并不删除此快照,不加快照ID则恢复第一个快照
git stash apply 快照ID

恢复到某一快照，并且删除此快照,不加快照ID则恢复第一个快照
git stash pop 快照ID

